// sap xep quan hau, chi in ra 1 cach
#include <bits/stdc++.h>
using namespace std;
const int MAX_N=10;
int n;
vector<int>col;
bool issafe(int x, int y)
{
    for(int i=1; i<x; i++)
    {
        if(col[i]==y || (abs(i-x) == abs(col[i]-y))) return false;
    }
    return true;
}
bool solvequeen(int x)
{
    if(x>n)
    {
        for(int i=1; i<=n; i++)
        {
            cout << i << " " << col[i] << endl;
        }
        return true;
    }
    for(int y=1; y<=n; y++)
    {
        if(issafe(x, y))
        {
            col[x]=y;
            if(solvequeen(x+1)) return true;
        }
    }
    return false;
}
int main()
{
    cin >> n;
    col.resize(MAX_N);
    if(!solvequeen(1)) cout << -1;
}



// sap xep quan hau, in ra tat ca cac cach
#include <bits/stdc++.h>
using namespace std;
const int MAX_N=10;
int n;
vector<int>col;
bool issafe(int x, int y)
{
    for(int i=1; i<x; i++)
    {
        if(col[i]==y || (abs(i-x) == abs(col[i]-y))) return false;
    }
    return true;
}
void solvequeen(int x)
{
    if(x>n)
    {
        for(int i=1; i<=n; i++)
        {
            cout << i << " " << col[i] << endl;
        }
        cout<<"---------------"<<endl;
    }
    for(int y=1; y<=n; y++)
    {
        if(issafe(x, y))
        {
            col[x]=y;
            solvequeen(x+1);
        }
    }
}
int main()
{
    cin >> n;
    col.resize(MAX_N);
    solvequeen(1);
}



// duong di tu vi tri a[0][0] den a[m][n] (chi in ra 1 t.hop)
#include<bits/stdc++.h>
using namespace std;
void find(vector<vector<int>>&matrix, int m, int n, int i, int j, string path)
{
    if(i == m-1 && j == n-1)
    {
        cout << path << endl;
        return;
    }
    if(j+1<n && matrix[i][j+1] == 1)
    {
        find(matrix, m, n, i, j+1, path+"R");
    }
    if(i+1<n && matrix[i+1][j] == 1)
    {
        find(matrix, m, n, i+1, j, path+"D");
    }
}
int main()
{
    int m, n;
    cin >> m >> n;
    vector<vector<int>>matrix(m, vector<int>(n));
    for(int i=0; i<m; i++)
    {
        for(int j=0; j<n; j++)
        {
            cin >> matrix[i][j];
        }
    }
    find(matrix, m, n, 0, 0, "");
}



// tat ca duong di tu vi tri a[0][0] den a[m][n] (in ra all t.hop)
#include <bits/stdc++.h>
using namespace std;
vector<string> paths;
int matrix[20][20];
int m, n, k=0;
void findPaths(int i, int j, string path) 
{
    if (i == m && j == n) 
    {
        paths.push_back(path);
        k++;
        return;
    }
    if (j < n && matrix[i][j+1] == 1) {
        findPaths(i, j+1, path + "R");
    }
    if (i < m && matrix[i+1][j] == 1) {
        findPaths(i+1, j, path + "D");
    }
}

int main() {
    cin >> m >> n;
    for (int i = 1; i <= m; ++i) {
        for (int j = 1; j <= n; ++j) {
            cin >> matrix[i][j];
        }
    }
    findPaths(1, 1, "");
    for(int i=0; i<k; i++)
    {
        cout << paths[i] << endl;
    }
    return 0;
}



// // Bai toan nguoi du lich
#include<bits/stdc++.h
#define inf 1e9 + 7
using namespace std;
const int max_n=20;
int n, current_cost, best_cost;
int visited[max_n], c[max_n][max_n], x[max_n];
void enter()
{
    cin>>n;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=n;j++)
        {
            cin>>c[i][j];
        }
    }
    best_cost=inf;
    current_cost=0;
    visited[1]=1;
    x[1]=1;
}
void Try(int i)
{
    for(int j=2;j<=n;j++)
    {
       if(!visited[j])
       {
            x[i]=j;
            visited[j]=1;
            current_cost+=c[x[i-1]][j];
            if(i==n)
            {
                if(current_cost+c[j][1]<best_cost)
                {
                best_cost=current_cost+c[j][1];
                }
            }
            else if(current_cost<best_cost) Try(i+1);
            current_cost-=c[x[i-1]][j];
            visited[j]=0;
       }
    }
 }
 int main()
 {
     enter();
     Try(2);
     cout<<best_cost<<endl;
 }




// hieu lon nhat trong mang (a[j]>a[i], j>i)
#include <bits/stdc++.h>
using namespace std;
int n;
int maxhieu(int a[], int left, int right)
{
    if(left=right) return -1; 
    int mid = (left+right)/2;
    int leftmaxdiff = maxhieu(a, left, mid);
    int rightmaxdiff = maxhieu(a, mid+1, right);
    int minleft = a[mid];
    int maxright = a[mid+1];
    for(int i=left; i<=mid; i++) minleft = min(minleft, a[i]);
    for(int i=mid+1; i<=right; i++) maxright = max(maxright, a[i]);
    return max(leftmaxdiff, max(rightmaxdiff, maxright-minleft));
}
int main()
{
    cin >> n;
    int a[n];
    for(int i=1; i<=n; i++) cin >> a[i];
    cout << maxhieu(a, 0, n-1);
}



// tim tien to chung dai nhat trong cac chuoi
#include<bits/stdc++.h>
using namespace std;
string lcp_two_string(string x, string y)
{
    int lcplength = 0;
    for(int i=0, j=0; i<x.size() && j<y.size(); i++, j++)
    {
        if(x[i] != y[j]) break;
        lcplength++;
    }
    return x.substr(0, lcplength);
}
string lcp_n_string(vector<string>a, int l, int r)
{
    if(l==r) return a[l];
    if(l<r)
    {
        int mid = (l+r)/2;
        string lcp_left = lcp_n_string(a, l, mid);
        string lcp_right = lcp_n_string(a, mid+1, r);
        return lcp_two_string(lcp_left, lcp_right);
    }
}
int main()
{
    int n;
    cin >> n;
    vector<string>strings;
    for(int i=1; i<=n; i++)
    {
        string k;
        cin >> k;
        strings.push_back(k);
    }
    string lcp = lcp_n_string(strings, 0, strings.size() - 1);
    cout << lcp << endl;
}



// quy hoach dong atm
#include<bits/stdc++.h>
using namespace std;
int minotes(int t, vector<int>arr)
{
    int n = arr.size();
    vector<int>dp(t+1, INT_MAX);
    dp[0]=0;
    for(int i=0; i<n; i++)
    {
        for(int j=t; j>=arr[i]; j--)
        {
            if(dp[j-arr[i]] != INT_MAX)
            {
                dp[j] = min(dp[j], dp[j-arr[i]] +1);
            }
        }
    }
    return dp[t] == INT_MAX ? -1 : dp[t];
}
int main()
{
    int n;
    cin >> n;
    int t;
    cin >> t;
    vector<int>arr(n);
    for(int i=0; i<n; i++) cin >> arr[i];
    cout << minotes(t, arr);
}





//quy hoach dong:do dai cua day con tang don dieu dai nhat
#include<bits/stdc++.h>
using namespace std;
int lengh(vector<int>num)
{
    int n=num.size();
    if(n==0) return 0;
    vector<int>lengths(n,1);
    for(int i=1; i<n; i++)
    {
        for(int j=0; j<i; j++)
        {
            if(num[i]>num[j])
            {
                lengths[i] = max(lengths[i], lengths[j]+1);
            }
        }
    }
    return *max_element(lengths.begin(), lengths.end());
}
int main()
{
    int n;
    cin >> n;
    vector<int>num(n);
    for(int i=0; i<n; i++) cin >> num[i];
    cout << lengh(num);
}




// quy hoach dong bai toan cai tui 
#include<bits/stdc++.h>
using namespace std;
void enter(int &n, int &w, vector<pair<int,int>>&items)
{
    cin >> n >> w;
    items.resize(n+1);
    for(int i=1; i<=n; i++) cin >> items[i].first >> items[i].second;
}
void qhd(int n, int w, vector<pair<int,int>>&items)
{
    vector<vector<int>>dp(n+1, vector<int>(w+1, 0));
    for(int i=1; i<=n; i++)
    {
        for(int j=0; j<=w; j++)
        {
            dp[i][j] = dp[i-1][j];
            if(j>=items[i].first)
            {
                dp[i][j] = max(dp[i][j], dp[i-1][j-items[i].first] + items[i].second);
            }
        }
    }
    cout << dp[n][w] << endl;
}
int main()
{
    int n, w;
    vector<pair<int,int>>items;
    enter(n, w, items);
    qhd(n, w, items);
}
